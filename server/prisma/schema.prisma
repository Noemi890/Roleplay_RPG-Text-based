generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String    @db.VarChar(250)
  profile   Profile[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Profile {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  name         String
  surname      String
  image        String?
  age          Int?
  race         String?
  biography    String?
  authorRoleId Int?
  authorRole   Role[]    @relation("RoleAuthor")
  gameId       Int?
  authorGameId Int?
  authorGame   Game?     @relation("Author")
  game         Game?     @relation(fields: [gameId], references: [id])
  roles        Role[]
  events       Event[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model Game {
  id       Int       @id @default(autoincrement())
  authorId Int?      @unique
  author   Profile?  @relation("Author", fields: [authorId], references: [id])
  profiles Profile[]
  roles    Role[]
  title    String
  story    String?
}

model Role {
  id       Int       @id @default(autoincrement())
  title    String
  content  String
  isEnded  Boolean   @default(false)
  authorId Int?       
  author   Profile?   @relation("RoleAuthor", fields: [authorId], references: [id])
  gameId   Int
  game     Game      @relation(fields: [gameId], references: [id])
  events   Event[]
  profile  Profile[]
}

model Event {
  id        Int     @id @default(autoincrement())
  content   String
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id])
  roleId    Int
  role      Role    @relation(fields: [roleId], references: [id])
}
